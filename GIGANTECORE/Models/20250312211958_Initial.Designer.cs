// <auto-generated />
using System;
using GIGANTECORE.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GIGANTECORE.Models
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250312211958_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GIGANTECORE.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaIngreso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("RolId")
                        .HasColumnType("integer");

                    b.Property<bool?>("SoloLectura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("PK__Admin__3214EC07A4E8858C");

                    b.HasIndex("RolId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("GIGANTECORE.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Carrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__Carrito__3214EC0784CC7F99");

                    b.HasIndex(new[] { "ProductoId" }, "IX_Carrito_ProductoId");

                    b.HasIndex(new[] { "UsuarioId" }, "IX_Carrito_UsuarioId");

                    b.ToTable("Carrito", (string)null);
                });

            modelBuilder.Entity("GIGANTECORE.Models.Categorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK__Categori__3214EC07791AF110");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Compañium", b =>
                {
                    b.Property<string>("Rnc")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("RNC");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Rnc")
                        .HasName("PK__Compañia__CAFF6951C669784F");

                    b.ToTable("Compañia");
                });

            modelBuilder.Entity("GIGANTECORE.Models.DetalleSolicitud", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDetalle"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("IdSolicitud")
                        .HasColumnType("integer");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.HasKey("IdDetalle")
                        .HasName("PK__DetalleS__E43646A58EBFD1A7");

                    b.HasIndex(new[] { "IdSolicitud" }, "IX_DetalleSolicitud_IdSolicitud");

                    b.HasIndex(new[] { "ProductoId" }, "IX_DetalleSolicitud_ProductoId");

                    b.ToTable("DetalleSolicitud", (string)null);
                });

            modelBuilder.Entity("GIGANTECORE.Models.HistorialCorreo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DetalleSolicitudId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Enviado");

                    b.Property<DateTime?>("FechaEnvio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__Historia__3214EC0765966D64");

                    b.HasIndex(new[] { "DetalleSolicitudId" }, "IX_HistorialCorreo_DetalleSolicitudId");

                    b.HasIndex(new[] { "UsuarioId" }, "IX_HistorialCorreo_UsuarioId");

                    b.ToTable("HistorialCorreo", (string)null);
                });

            modelBuilder.Entity("GIGANTECORE.Models.Producto", b =>
                {
                    b.Property<int>("Codigo")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<bool?>("EsDestacado")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Marca")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Medidas")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("SubCategoriaId")
                        .HasColumnType("integer");

                    b.HasKey("Codigo")
                        .HasName("PK__tmp_ms_x__06370DAD53EE836F");

                    b.HasIndex(new[] { "CategoriaId" }, "IX_Productos_CategoriaId");

                    b.HasIndex(new[] { "SubCategoriaId" }, "IX_Productos_SubCategoriaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("GIGANTECORE.Models.RolePermiso", b =>
                {
                    b.Property<int>("IdPermiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPermiso"));

                    b.Property<bool>("CanCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdPermiso");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermisos");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Roles", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdRol");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Solicitud", b =>
                {
                    b.Property<int>("IdSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSolicitud"));

                    b.Property<DateTime?>("FechaSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("IdSolicitud")
                        .HasName("PK__Solicitu__36899CEF05DB70D6");

                    b.HasIndex(new[] { "UsuarioId" }, "IX_Solicitud_UsuarioId");

                    b.ToTable("Solicitud", (string)null);
                });

            modelBuilder.Entity("GIGANTECORE.Models.SubCategorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK__SubCateg__3214EC079C3939DB");

                    b.HasIndex(new[] { "CategoriaId" }, "IX_SubCategoria_CategoriaId");

                    b.ToTable("SubCategoria");
                });

            modelBuilder.Entity("GIGANTECORE.Models.UsuarioCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("FechaIngreso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Rnc")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("RNC");

                    b.Property<int>("RolId")
                        .HasColumnType("integer");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PK__UsuarioC__3214EC07D79F99F6");

                    b.HasIndex("RolId");

                    b.HasIndex(new[] { "Rnc" }, "IX_UsuarioCliente_RNC");

                    b.ToTable("UsuarioCliente", (string)null);
                });

            modelBuilder.Entity("GIGANTECORE.Models.Vacantes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("AnosExperiencia")
                        .HasColumnType("integer");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurriculumUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FuncionLaboral")
                        .HasColumnType("text");

                    b.Property<string>("NivelAcademico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NivelLaboral")
                        .HasColumnType("text");

                    b.Property<string>("OtraFuncionLaboral")
                        .HasColumnType("text");

                    b.Property<string>("OtroNivelLaboral")
                        .HasColumnType("text");

                    b.Property<decimal?>("UltimoSalario")
                        .HasColumnType("numeric");

                    b.Property<string>("cedula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("estado")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("sexo")
                        .HasColumnType("character(1)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Vacantes");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Admin", b =>
                {
                    b.HasOne("GIGANTECORE.Models.Roles", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Carrito", b =>
                {
                    b.HasOne("GIGANTECORE.Models.Producto", "Producto")
                        .WithMany("Carritos")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK__Carrito__Product__6C190EBB");

                    b.HasOne("GIGANTECORE.Models.UsuarioCliente", "Usuario")
                        .WithMany("Carritos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK__Carrito__Usuario__46E78A0C");

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GIGANTECORE.Models.DetalleSolicitud", b =>
                {
                    b.HasOne("GIGANTECORE.Models.Solicitud", "IdSolicitudNavigation")
                        .WithMany("DetalleSolicituds")
                        .HasForeignKey("IdSolicitud")
                        .IsRequired()
                        .HasConstraintName("FK__DetalleSo__IdSol__4D94879B");

                    b.HasOne("GIGANTECORE.Models.Producto", "Producto")
                        .WithMany("DetalleSolicituds")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK__DetalleSo__Produ__6D0D32F4");

                    b.Navigation("IdSolicitudNavigation");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("GIGANTECORE.Models.HistorialCorreo", b =>
                {
                    b.HasOne("GIGANTECORE.Models.DetalleSolicitud", "DetalleSolicitud")
                        .WithMany("HistorialCorreos")
                        .HasForeignKey("DetalleSolicitudId")
                        .IsRequired()
                        .HasConstraintName("FK__HistorialCorreo__DetalleSolicitudId");

                    b.HasOne("GIGANTECORE.Models.UsuarioCliente", "Usuario")
                        .WithMany("HistorialCorreos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK__HistorialCorreo__UsuarioId");

                    b.Navigation("DetalleSolicitud");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Producto", b =>
                {
                    b.HasOne("GIGANTECORE.Models.Categorium", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_Productos_Categoria");

                    b.HasOne("GIGANTECORE.Models.SubCategorium", "SubCategoria")
                        .WithMany("Productos")
                        .HasForeignKey("SubCategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK__Productos__SubCa__6EF57B66");

                    b.Navigation("Categoria");

                    b.Navigation("SubCategoria");
                });

            modelBuilder.Entity("GIGANTECORE.Models.RolePermiso", b =>
                {
                    b.HasOne("GIGANTECORE.Models.Roles", "Role")
                        .WithMany("RolePermisos")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Solicitud", b =>
                {
                    b.HasOne("GIGANTECORE.Models.UsuarioCliente", "Usuario")
                        .WithMany("Solicituds")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK__Solicitud__Usuar__4AB81AF0");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GIGANTECORE.Models.SubCategorium", b =>
                {
                    b.HasOne("GIGANTECORE.Models.Categorium", "Categoria")
                        .WithMany("SubCategoria")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK__SubCatego__Categ__3F466844");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("GIGANTECORE.Models.UsuarioCliente", b =>
                {
                    b.HasOne("GIGANTECORE.Models.Compañium", "RncNavigation")
                        .WithMany("UsuarioClientes")
                        .HasForeignKey("Rnc")
                        .HasConstraintName("FK_UsuarioCliente_Compañia");

                    b.HasOne("GIGANTECORE.Models.Roles", "Role")
                        .WithMany("UsuarioClientes")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RncNavigation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Categorium", b =>
                {
                    b.Navigation("Productos");

                    b.Navigation("SubCategoria");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Compañium", b =>
                {
                    b.Navigation("UsuarioClientes");
                });

            modelBuilder.Entity("GIGANTECORE.Models.DetalleSolicitud", b =>
                {
                    b.Navigation("HistorialCorreos");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Producto", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("DetalleSolicituds");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Roles", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("RolePermisos");

                    b.Navigation("UsuarioClientes");
                });

            modelBuilder.Entity("GIGANTECORE.Models.Solicitud", b =>
                {
                    b.Navigation("DetalleSolicituds");
                });

            modelBuilder.Entity("GIGANTECORE.Models.SubCategorium", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("GIGANTECORE.Models.UsuarioCliente", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("HistorialCorreos");

                    b.Navigation("Solicituds");
                });
#pragma warning restore 612, 618
        }
    }
}
